apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.grafana.service.name }}
  labels:
    app: {{ .Values.grafana.service.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.grafana.service.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.grafana.service.name }}
    spec:
      securityContext:
            fsGroup: 472
      containers:
        - name: {{ .Values.grafana.service.name }}
          image: {{ .Values.grafana.image }}
          securityContext:
            runAsUser: 472
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: {{ .Values.grafana.gFSecurityAdminUser }}
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: {{ .Values.grafana.gFSecurityAdminPassword }}
          volumeMounts:
            - name: grafana-storage
              mountPath: {{ .Values.grafana.mountPaths.storage }}
            - name: grafana-datasource
              mountPath: {{ .Values.grafana.mountPaths.datasource }}
            - name: grafana-config
              mountPath: {{ .Values.grafana.mountPaths.config }}
            - name: grafana-dashboard-providers
              mountPath: {{ .Values.grafana.mountPaths.dashboardProviders }}
            - name: grafana-dashboards
              mountPath: {{ .Values.grafana.mountPaths.dashboards }} # dashboard JSON files will be placed here
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc-storage
        - name: grafana-datasource
          configMap:
            name: grafana-datasource
        - name: grafana-config
          configMap:
            name: grafana-config
        - name: grafana-dashboard-providers
          configMap:
            name: grafana-dashboard-providers
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.grafana.service.name }}
  labels:
    app: {{ .Values.grafana.service.name  }}
spec:
  type: NodePort
  ports:
    - port: {{ .Values.grafana.service.port }}
      targetPort: {{ .Values.grafana.service.targetPort }}
      nodePort: {{ .Values.grafana.service.nodePort }}
  selector:
    app: {{ .Values.grafana.service.name }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: grafana-dashboards-importer
spec:
  backoffLimit: 2
  ttlSecondsAfterFinished: 100
  template:
    spec:
      restartPolicy: Never
      initContainers:
        - name: wait-for-grafana
          image: curlimages/curl:8.8.0
          command:
            - /bin/sh
            - -c
            - |
              until curl -sf http://{{ .Values.grafana.service.name }}:{{ .Values.grafana.service.port }}/api/health; do
                echo "Waiting for Grafana to be ready..."
                sleep 5
              done
              echo "Grafana is up!"
      containers:
        - name: grafana-dashboards-importer
          image: alpine:3.20
          command:
            - /bin/sh
            - -c
            - |
              set -euo pipefail
              echo "Installing dependencies..."
              apk add --no-cache curl jq

              for file in {{ .Values.grafana.mountPaths.dashboards }}/*.json; do
                echo "Importing $file"
                if [ ! -s "$file" ]; then
                  echo "Skipping empty file $file"
                  continue
                fi
                DASHBOARD=$(jq -c . < "$file" || true)
                if [ -z "$DASHBOARD" ]; then
                  echo "Failed to parse $file"
                  continue
                fi
                echo "Dashboard content: $DASHBOARD"
                curl -s -X POST http://{{ .Values.grafana.gFSecurityAdminUser }}:{{ .Values.grafana.gFSecurityAdminPassword }}@{{ .Values.grafana.service.name }}:{{ .Values.grafana.service.port }}/api/dashboards/db \
                  -H "Content-Type: application/json" \
                  -d "{\"dashboard\": $DASHBOARD, \"overwrite\": true}" \
                  && echo "\nImported $file" \
                  || echo "\nFailed to import $file"
              done
              echo "All dashboards processed. Exiting cleanly."
              exit 0
          volumeMounts:
            - name: grafana-dashboards
              mountPath: {{ .Values.grafana.mountPaths.dashboards }}
      volumes:
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
